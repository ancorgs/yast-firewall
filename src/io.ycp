/**
 * File:
 *   io.ycp
 *
 * Module:
 *   Configuration of firewall
 *
 * Summary:
 *   Input and output functions.
 *
 * Authors:
 *   Michael Hager <mike@suse.de>
 *
 * $Id$
 *
 * Input and output routines. 
 *
 */

{

textdomain "firewall";

/**
 * Fill the map of all firewall settings from the SCR
 * @return map all firewall settings
 */
global define FirewallRead() ``{
    map settings = $[];
//  <AUTOCODE READ>
    string FW_LOG_ACCEPT_ALL = SCR::Read(.sysconfig.SuSEfirewall2.FW_LOG_ACCEPT_ALL);
    if( FW_LOG_ACCEPT_ALL == nil ) FW_LOG_ACCEPT_ALL = "no";
    change(settings,"FW_LOG_ACCEPT_ALL",FW_LOG_ACCEPT_ALL);

    string FW_LOG_ACCEPT_CRIT = SCR::Read(.sysconfig.SuSEfirewall2.FW_LOG_ACCEPT_CRIT);
    if( FW_LOG_ACCEPT_CRIT == nil ) FW_LOG_ACCEPT_CRIT = "yes";
    change(settings,"FW_LOG_ACCEPT_CRIT",FW_LOG_ACCEPT_CRIT);

    string FW_LOG_DROP_ALL = SCR::Read(.sysconfig.SuSEfirewall2.FW_LOG_DROP_ALL);
    if( FW_LOG_DROP_ALL == nil ) FW_LOG_DROP_ALL = "no";
    change(settings,"FW_LOG_DROP_ALL",FW_LOG_DROP_ALL);

    string FW_LOG_DROP_CRIT = SCR::Read(.sysconfig.SuSEfirewall2.FW_LOG_DROP_CRIT);
    if( FW_LOG_DROP_CRIT == nil ) FW_LOG_DROP_CRIT = "yes";
    change(settings,"FW_LOG_DROP_CRIT",FW_LOG_DROP_CRIT);

    string FW_PROTECT_FROM_INTERNAL = SCR::Read(.sysconfig.SuSEfirewall2.FW_PROTECT_FROM_INTERNAL);
    if( FW_PROTECT_FROM_INTERNAL == nil ) FW_PROTECT_FROM_INTERNAL = "yes";
    change(settings,"FW_PROTECT_FROM_INTERNAL",FW_PROTECT_FROM_INTERNAL);

    string FW_DEV_INT = SCR::Read(.sysconfig.SuSEfirewall2.FW_DEV_INT);
    if( FW_DEV_INT == nil ) FW_DEV_INT = "";
    change(settings,"FW_DEV_INT",FW_DEV_INT);

    string FW_DEV_EXT = SCR::Read(.sysconfig.SuSEfirewall2.FW_DEV_EXT);
    if( FW_DEV_EXT == nil ) FW_DEV_EXT = "";
    change(settings,"FW_DEV_EXT",FW_DEV_EXT);

    string FW_SERVICES_EXT_TCP = SCR::Read(.sysconfig.SuSEfirewall2.FW_SERVICES_EXT_TCP);
    if( FW_SERVICES_EXT_TCP == nil ) FW_SERVICES_EXT_TCP = "";
    change(settings,"FW_SERVICES_EXT_TCP",FW_SERVICES_EXT_TCP);

    string FW_AUTOPROTECT_SERVICES = SCR::Read(.sysconfig.SuSEfirewall2.FW_AUTOPROTECT_SERVICES);
    if( FW_AUTOPROTECT_SERVICES == nil ) FW_AUTOPROTECT_SERVICES = "yes";
    change(settings,"FW_AUTOPROTECT_SERVICES",FW_AUTOPROTECT_SERVICES);

    string FW_MASQ_NETS = SCR::Read(.sysconfig.SuSEfirewall2.FW_MASQ_NETS);
    if( FW_MASQ_NETS == nil ) FW_MASQ_NETS = "";
    change(settings,"FW_MASQ_NETS",FW_MASQ_NETS);

    string FW_ROUTE = SCR::Read(.sysconfig.SuSEfirewall2.FW_ROUTE);
    if( FW_ROUTE == nil ) FW_ROUTE = "no";
    change(settings,"FW_ROUTE",FW_ROUTE);

    string FW_MASQUERADE = SCR::Read(.sysconfig.SuSEfirewall2.FW_MASQUERADE);
    if( FW_MASQUERADE == nil ) FW_MASQUERADE = "no";
    change(settings,"FW_MASQUERADE",FW_MASQUERADE);

    string FW_ALLOW_FW_TRACEROUTE = SCR::Read(.sysconfig.SuSEfirewall2.FW_ALLOW_FW_TRACEROUTE);
    if( FW_ALLOW_FW_TRACEROUTE == nil ) FW_ALLOW_FW_TRACEROUTE = "yes";
    change(settings,"FW_ALLOW_FW_TRACEROUTE",FW_ALLOW_FW_TRACEROUTE);

//  </AUTOCODE>

    string REJECT_ALL_INCOMING_CONNECTIONS = SCR::Read(.sysconfig.personal-firewall.REJECT_ALL_INCOMING_CONNECTIONS);
    if( REJECT_ALL_INCOMING_CONNECTIONS == nil ) REJECT_ALL_INCOMING_CONNECTIONS = "";
    if( REJECT_ALL_INCOMING_CONNECTIONS != "" &&  REJECT_ALL_INCOMING_CONNECTIONS != "no")
    {
	change(settings,"personal_firewall_is_active",true);
    }
    else
    {
	change(settings,"personal_firewall_is_active",false);
    }
    // not needed
    // change(settings,"REJECT_ALL_INCOMING_CONNECTIONS",REJECT_ALL_INCOMING_CONNECTIONS);

    // fetch list of network devices
    list devicelist_scr = SCR::Read(.probe.netif);
    if (devicelist == nil)
    {
	devicelist = [];
    }
    list devices = [];

    // filter the device names
    foreach(`device,devicelist_scr,``{
	string device = lookup(device,"dev_name","");
	if( device != ""
	    && !issubstring(device,"lo")
	    && !issubstring(device,"sit"))
	{
		change(devices,device);
	}
    });

    change(settings,"network devices",devices);

    y2milestone("%1",settings);
    return settings;
}

/**
 * Update the SCR from the map of all firewall settings
 * @param m a map of all firewall settings
 * @return boolean success of operation
 */
global define FirewallWrite(map settings) ``{
    boolean ret = false;
//  <AUTOCODE WRITE>
    string FW_LOG_ACCEPT_ALL = lookup(settings,"FW_LOG_ACCEPT_ALL","no");
    ret = SCR::Write(.sysconfig.SuSEfirewall2.FW_LOG_ACCEPT_ALL, FW_LOG_ACCEPT_ALL);

    string FW_LOG_ACCEPT_CRIT = lookup(settings,"FW_LOG_ACCEPT_CRIT","yes");
    ret = SCR::Write(.sysconfig.SuSEfirewall2.FW_LOG_ACCEPT_CRIT, FW_LOG_ACCEPT_CRIT);

    string FW_LOG_DROP_ALL = lookup(settings,"FW_LOG_DROP_ALL","no");
    ret = SCR::Write(.sysconfig.SuSEfirewall2.FW_LOG_DROP_ALL, FW_LOG_DROP_ALL);

    string FW_LOG_DROP_CRIT = lookup(settings,"FW_LOG_DROP_CRIT","yes");
    ret = SCR::Write(.sysconfig.SuSEfirewall2.FW_LOG_DROP_CRIT, FW_LOG_DROP_CRIT);

    string FW_PROTECT_FROM_INTERNAL = lookup(settings,"FW_PROTECT_FROM_INTERNAL","yes");
    ret = SCR::Write(.sysconfig.SuSEfirewall2.FW_PROTECT_FROM_INTERNAL, FW_PROTECT_FROM_INTERNAL);

    string FW_DEV_INT = lookup(settings,"FW_DEV_INT","");
    ret = SCR::Write(.sysconfig.SuSEfirewall2.FW_DEV_INT, FW_DEV_INT);

    string FW_DEV_EXT = lookup(settings,"FW_DEV_EXT","");
    ret = SCR::Write(.sysconfig.SuSEfirewall2.FW_DEV_EXT, FW_DEV_EXT);

    string FW_SERVICES_EXT_TCP = lookup(settings,"FW_SERVICES_EXT_TCP","");
    ret = SCR::Write(.sysconfig.SuSEfirewall2.FW_SERVICES_EXT_TCP, FW_SERVICES_EXT_TCP);

    string FW_AUTOPROTECT_SERVICES = lookup(settings,"FW_AUTOPROTECT_SERVICES","yes");
    ret = SCR::Write(.sysconfig.SuSEfirewall2.FW_AUTOPROTECT_SERVICES, FW_AUTOPROTECT_SERVICES);

    string FW_MASQ_NETS = lookup(settings,"FW_MASQ_NETS","");
    ret = SCR::Write(.sysconfig.SuSEfirewall2.FW_MASQ_NETS, FW_MASQ_NETS);

    string FW_ROUTE = lookup(settings,"FW_ROUTE","no");
    ret = SCR::Write(.sysconfig.SuSEfirewall2.FW_ROUTE, FW_ROUTE);

    string FW_MASQUERADE = lookup(settings,"FW_MASQUERADE","no");
    ret = SCR::Write(.sysconfig.SuSEfirewall2.FW_MASQUERADE, FW_MASQUERADE);

    string FW_ALLOW_FW_TRACEROUTE = lookup(settings,"FW_ALLOW_FW_TRACEROUTE","yes");
    ret = SCR::Write(.sysconfig.SuSEfirewall2.FW_ALLOW_FW_TRACEROUTE, FW_ALLOW_FW_TRACEROUTE);

//  </AUTOCODE>

    if (lookup(firewall_settings,"personal_firewall_is_active",false)==true)
    {
	SCR::Write(.sysconfig.personal-firewall.REJECT_ALL_INCOMING_CONNECTIONS,"no");
	SCR::Write(.sysconfig.personal-firewall,nil);
    }

    // sync settings to file !!!
    ret = SCR::Write(.sysconfig.SuSEfirewall2, nil);

    y2milestone("writing firewall settings finished, returncode %1",ret);

    if(ret == false)
    {
	UI::Messagepopup(_("Writing settings failed"));
    }
    return ret;
}

}
