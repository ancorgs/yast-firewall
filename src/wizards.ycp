/**
 * File:	include/firewall/wizards.ycp
 * Package:	Firewall configuration
 * Summary:	Wizards definitions
 * Authors:	Michal Svec <msvec@suse.cz>
 *
 * $Id$
 */

{

textdomain "firewall";

import "Label";
import "Wizard";

include "wizard/sequencer.ycp";
include "firewall/complex.ycp";
include "firewall/dialogs.ycp";

/**
 * Whole configuration of firewall
 * @return any Returned value from WizardSequencer() call
 */
global define any FirewallSequence() ``{

    map aliases = $[
	"read"	: [ ``( ReadDialog() ), true ],
	"main"	:   ``( MainSequence() ),
	"write"	: [ ``( WriteDialog() ), true ]
    ];

    map sequence = $[
	"ws_start" : "read",
	"read" : $[
	    `abort	: `abort,
	    `next	: "main"
	],
	"main" : $[
	    `abort	: `abort,
	    `next	: "write"
	],
	"write" : $[
	    `abort	: `abort,
	    `next	: `next
	]
    ];

    /* Dialog caption */
    string caption = _("Firewall configuration");
    /* Label */
    term contents = `Label(_("Initializing ..."));

    Wizard::CreateDialog();
    Wizard::SetContentsButtons(caption, contents, "",
	    Label::BackButton(), Label::NextButton());

    any ret = WizardSequencer(aliases, sequence);

    UI::CloseDialog();
    return ret;
}

/**
 * Whole configuration of firewall but without reading and writing.
 * For use with autoinstallation.
 * @return any Returned value from WizardSequencer() call
 */
global define any FirewallAutoSequence() ``{

    /* Dialog caption */
    string caption = _("Firewall configuration");
    /* Label */
    term contents = `Label(_("Initializing ..."));

    Wizard::CreateDialog();
    Wizard::SetContentsButtons(caption, contents, "",
	    Label::BackButton(), Label::NextButton());

    /* Run the main configuration workflow */
    any ret = MainSequence();

    UI::CloseDialog();
    return ret;
}

/**
 * Main workflow of the firewall configuration
 * @return any Returned value from WizardSequencer() call
 */
global define any MainSequence() ``{

    map aliases = $[
        "stop"		: ``(StopDialog()),
        "devices"	: ``(DevicesDialog()),
        "services"	: ``(ServicesDialog()),
        "features"	: ``(FeatureDialog()),
        "logging"	: ``(LoggingDialog()),
    ];

    map sequence = $[
        "ws_start" : "step1",
        "devices" : $[
	    `abort: `abort,
            `next: "services"
        ],
        "services" : $[
	    `abort: `abort,
            `next: "features"
        ],
        "features" : $[
	    `abort: `abort,
            `next: "logging"
        ],
        "logging" : $[
	    `abort: `abort,
            `next: `next
        ]
    ];

    any ret = WizardSequencer(aliases, sequence);

    return ret;
}

/**
 * Main interface function
 */
global define Firewall() ``{
    map aliases = $[
	"config_or_stop": [ ``(AskStopDialog()), true ],
	"stop"		: ``(StopDialog()),
	"read"		: [ ``(ReadDialog()), true ],
	"devices"	: ``(DevicesDialog()),
	"services"	: ``(ServicesDialog()),
	"features"	: ``(FeatureDialog()),
	"logging"	: ``(LoggingDialog()),
	"prewrite"	: [ ``(PreWriteDialog()), true ],
	"write"		: [ ``(WriteDialog()), true ]
    ];

    map sequence = $[
        "ws_start" : "config_or_stop",
        "config_or_stop" : $[
	    `abort: `abort,
            `config: "read",
	    `stop: "stop"
        ],
        "stop" : $[
	    `abort: `abort,
            `next: `next
        ],
        "read" : $[
	    `abort: `abort,
            `next: "devices"
        ],
        "devices" : $[
	    `abort: `abort,
            `next: "services"
        ],
        "services" : $[
	    `abort: `abort,
            `next: "features"
        ],
        "features" : $[
	    `abort: `abort,
            `next: "logging"
        ],
        "logging" : $[
	    `abort: `abort,
            `next: "prewrite"
        ],
        "prewrite" : $[
	    `abort: `abort,
            `next: "write"
        ],
        "write" : $[
			`abort: `abort,
            `next: `ws_finish
        ]
    ];

    string help = "";
    string caption = _("Firewall configuration");
    term contents = `Label(_("Initializing ..."));

    Wizard::CreateDialog();
    Wizard::SetContentsButtons(caption,contents,help,Label::BackButton(),Label::NextButton());

    any ret = WizardSequencer(aliases, sequence);
    UI::CloseDialog();
    return ret;
}



/**
 * Main interface function
 */
global define FirewallAutoSequence() ``{
    map aliases = $[
        "stop"		: ``(StopDialog()),
        "step1"		: ``(DevDialog()),
        "step2"		: ``(ServicesDialog()),
        "step3"		: ``(FeatureDialog()),
        "step4"		: ``(LoggingDialog()),
    ];

    map sequence = $[
        "ws_start" : "step1",
        "step1" : $[
	    `abort: `abort,
            `next: "step2"
        ],
        "step2" : $[
	    `abort: `abort,
            `next: "step3"
        ],
        "step3" : $[
	    `abort: `abort,
            `next: "step4"
        ],
        "step4" : $[
	    `abort: `abort,
            `next: `next
        ]
    ];

    string help = "";

    /* Read dialog caption */
    string caption = _("Firewall configuration");

    /* Read dialog contents */
    term contents = `Label(_("Initializing ..."));

    Wizard::CreateDialog();
    Wizard::SetContentsButtons(caption, contents, help,
	    Label::BackButton(), Label::NextButton());

    any ret = WizardSequencer(aliases, sequence);
    UI::CloseDialog();
    return ret;
}



/* EOF */
}
