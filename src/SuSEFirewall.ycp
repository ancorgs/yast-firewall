/**
 * File:	modules/SuSEFirewall.ycp
 * Package:	SuSE firewall configuration
 * Summary:	Main module, providing IO functions
 * Authors:	Anas Nashif <nashif@suse.de>
 *		Michal Svec <msvec@suse.cz>
 *		Michael Hager <mike@suse.de>
 *
 * $Id$
 */

{

module "SuSEFirewall";
textdomain "firewall";

import "Label";
import "Mode";
import "Popup";
import "Progress";
import "Report";
import "Runlevel";
import "Summary";

/* global settings map */
global map settings = $[];

global boolean personal_firewall_is_active = false;

/**
 * Write only, used during autoinstallation.
 * Don't run services and SuSEconfig, it's all done at one place.
 */
global boolean write_only = false;

global boolean start = false;

/**
 * Constructor
 */
global define void SuSEFirewall () ``{

    if (!Mode::config) {

	string REJECT_ALL_INCOMING_CONNECTIONS = SCR::Read(.sysconfig.personal-firewall.REJECT_ALL_INCOMING_CONNECTIONS);
	if( REJECT_ALL_INCOMING_CONNECTIONS == nil ) REJECT_ALL_INCOMING_CONNECTIONS = "";
	if( REJECT_ALL_INCOMING_CONNECTIONS != "" &&  REJECT_ALL_INCOMING_CONNECTIONS != "no")
	{
	    personal_firewall_is_active = true;
	}
	else
	{
	    personal_firewall_is_active = false;
	}
    }
}

/**
 * Get all firewall settings from the first parameter
 * (for use by autoinstallation).
 * @param s data to be imported
 * @return true on success
 */
global define boolean Import(map s) ``{
    settings = s;
    return true;
}

/**
 * Dump the firewall settings to a single map
 * (for use by autoinstallation).
 * @return dumped settings (later acceptable by Import())
 */
global define map Export() ``{
    if(haskey(settings, "network_devices" ))
	settings = remove(settings, "network_devices" );

    settings["start_firewall"] = start;
    return settings;
}

/**
 * Create a textual summary and a list of unconfigured cards
 * @return summary of the current configuration
 */
global define list Summary() ``{

    string summary = "";
    summary = Summary::AddHeader(summary, _("External Device"));
    summary = Summary::AddLine(summary, (settings["FW_DEV_EXT"]:"" != "") ?
			       settings["FW_DEV_EXT"]:"" : Summary::NotConfigured());

    summary = Summary::AddHeader(summary, _("Internal Device"));
    summary = Summary::AddLine(summary, (settings["FW_DEV_INT"]:"" != "") ?
			       settings["FW_DEV_INT"]:"" : Summary::NotConfigured());

    summary = Summary::AddHeader(summary, _("Protect from Internal"));
    summary = Summary::AddLine(summary, (settings["FW_PROTECT_FROM_INTERNAL"]:"" != "") ?
			       settings["FW_PROTECT_FROM_INTERNAL"]:"" : Summary::NotConfigured());

    summary = Summary::AddHeader(summary, _("External TCP Services"));
    summary = Summary::AddLine(summary, (settings["FW_SERVICES_EXT_TCP"]:"" != "") ?
			       settings["FW_SERVICES_EXT_TCP"]:"" : Summary::NotConfigured());

    summary = Summary::AddLine(summary, _("(Start the configuration to view more options)"));

    return [ summary, [] ];
}

/**
 * Fill the map of all firewall settings from the SCR
 * @return true on success
 */
global define boolean Read() ``{

    // Check if firewall running
    start = Runlevel::ServiceEnabled("SuSEfirewall2_init");


//  <AUTOCODE READ>
    string FW_LOG_ACCEPT_ALL = SCR::Read(.sysconfig.SuSEfirewall2.FW_LOG_ACCEPT_ALL);
    if( FW_LOG_ACCEPT_ALL == nil ) FW_LOG_ACCEPT_ALL = "no";
    settings["FW_LOG_ACCEPT_ALL"] = FW_LOG_ACCEPT_ALL;

    string FW_LOG_ACCEPT_CRIT = SCR::Read(.sysconfig.SuSEfirewall2.FW_LOG_ACCEPT_CRIT);
    if( FW_LOG_ACCEPT_CRIT == nil ) FW_LOG_ACCEPT_CRIT = "yes";
    settings["FW_LOG_ACCEPT_CRIT"] = FW_LOG_ACCEPT_CRIT;

    string FW_LOG_DROP_ALL = SCR::Read(.sysconfig.SuSEfirewall2.FW_LOG_DROP_ALL);
    if( FW_LOG_DROP_ALL == nil ) FW_LOG_DROP_ALL = "no";
    settings["FW_LOG_DROP_ALL"] = FW_LOG_DROP_ALL;

    string FW_LOG_DROP_CRIT = SCR::Read(.sysconfig.SuSEfirewall2.FW_LOG_DROP_CRIT);
    if( FW_LOG_DROP_CRIT == nil ) FW_LOG_DROP_CRIT = "yes";
    settings["FW_LOG_DROP_CRIT"] = FW_LOG_DROP_CRIT;

    string FW_PROTECT_FROM_INTERNAL = SCR::Read(.sysconfig.SuSEfirewall2.FW_PROTECT_FROM_INTERNAL);
    if( FW_PROTECT_FROM_INTERNAL == nil ) FW_PROTECT_FROM_INTERNAL = "yes";
    settings["FW_PROTECT_FROM_INTERNAL"] = FW_PROTECT_FROM_INTERNAL;

    string FW_DEV_INT = SCR::Read(.sysconfig.SuSEfirewall2.FW_DEV_INT);
    if( FW_DEV_INT == nil ) FW_DEV_INT = "";
    settings["FW_DEV_INT"] = FW_DEV_INT;

    string FW_DEV_EXT = SCR::Read(.sysconfig.SuSEfirewall2.FW_DEV_EXT);
    if( FW_DEV_EXT == nil ) FW_DEV_EXT = "";
    settings["FW_DEV_EXT"] = FW_DEV_EXT;

    string FW_SERVICES_EXT_TCP = SCR::Read(.sysconfig.SuSEfirewall2.FW_SERVICES_EXT_TCP);
    if( FW_SERVICES_EXT_TCP == nil ) FW_SERVICES_EXT_TCP = "";
    settings["FW_SERVICES_EXT_TCP"] = FW_SERVICES_EXT_TCP;

    string FW_AUTOPROTECT_SERVICES = SCR::Read(.sysconfig.SuSEfirewall2.FW_AUTOPROTECT_SERVICES);
    if( FW_AUTOPROTECT_SERVICES == nil ) FW_AUTOPROTECT_SERVICES = "yes";
    settings["FW_AUTOPROTECT_SERVICES"] = FW_AUTOPROTECT_SERVICES;

    string FW_MASQ_NETS = SCR::Read(.sysconfig.SuSEfirewall2.FW_MASQ_NETS);
    if( FW_MASQ_NETS == nil ) FW_MASQ_NETS = "";
    settings["FW_MASQ_NETS"] = FW_MASQ_NETS;

    string FW_ROUTE = SCR::Read(.sysconfig.SuSEfirewall2.FW_ROUTE);
    if( FW_ROUTE == nil ) FW_ROUTE = "no";
    settings["FW_ROUTE"] = FW_ROUTE;

    string FW_MASQUERADE = SCR::Read(.sysconfig.SuSEfirewall2.FW_MASQUERADE);
    if( FW_MASQUERADE == nil ) FW_MASQUERADE = "no";
    settings["FW_MASQUERADE"] = FW_MASQUERADE;

    string FW_ALLOW_FW_TRACEROUTE = SCR::Read(.sysconfig.SuSEfirewall2.FW_ALLOW_FW_TRACEROUTE);
    if( FW_ALLOW_FW_TRACEROUTE == nil ) FW_ALLOW_FW_TRACEROUTE = "yes";
    settings["FW_ALLOW_FW_TRACEROUTE"] = FW_ALLOW_FW_TRACEROUTE;

//  </AUTOCODE>

    // fetch list of network devices
    list devicelist = SCR::Read(.probe.netif);
    if (devicelist == nil) devicelist = [];
    list devices = [];

    // filter the device names
    foreach(map device, devicelist, ``{
	string device = device["dev_name"]:"";
	if( device != ""
	    && !issubstring(device,"lo")
	    && !issubstring(device,"sit"))
	{
	    change(devices,device);
	}
    });

    settings["network_devices"] = devices;

    return true;
}


/**
 * Update the SCR from the map of all firewall settings
 * @param m a map of all firewall settings
 * @return true on success
 */
global define boolean Write() ``{

    if(!start)
	return false;

    Progress::New(
	/* Progress caption */
	_("Firewall configuration -- saving settings"),
	/* Progress contents */
	_("Preparing ..."),
	3,
	[
	    /* Progress stage 1/3 */
	    _("Stop firewall"),
	    /* Progress stage 2/3 */
	    _("Save settings"),
	    /* Progress stage 3/3 */
	    _("Start firewall")
	],
	[
	    /* Progress step 1/3 */
	    _("Stopping firewall..."),
	    /* Progress step 2/3 */
	    _("Saving settings..."),
	    /* Progress step 3/3 */
	    _("Starting firewall...")
	],
	""
    );

    Progress::NextStage();

    boolean retry = true;
    while(retry) {

	retry = false;
	if(Runlevel::RunInitScript("SuSEfirewall2_setup", "stop") != 0) {

	    /* Popup text */
	    string whatfailedmsg = _("Stopping the firewall failed");
	    symbol ret = Popup::AnyQuestion3(whatfailedmsg,
		    "", Label::ContinueButton(), Label::AbortButton(),
		    Label::RetryButton(), `focus_yes );

	    if( ret == `retry)
	    {
		retry=true;
	    }
	    else if(ret==`no)
	    {
		return `next;
	    }
	}
    }

    Progress::NextStage();
    boolean write_ret = false;

//  <AUTOCODE WRITE>
    string FW_LOG_ACCEPT_ALL = settings["FW_LOG_ACCEPT_ALL"]:"no";
    write_ret = SCR::Write(.sysconfig.SuSEfirewall2.FW_LOG_ACCEPT_ALL, FW_LOG_ACCEPT_ALL);

    string FW_LOG_ACCEPT_CRIT = settings["FW_LOG_ACCEPT_CRIT"]:"yes";
    write_ret = SCR::Write(.sysconfig.SuSEfirewall2.FW_LOG_ACCEPT_CRIT, FW_LOG_ACCEPT_CRIT);

    string FW_LOG_DROP_ALL = settings["FW_LOG_DROP_ALL"]:"no";
    write_ret = SCR::Write(.sysconfig.SuSEfirewall2.FW_LOG_DROP_ALL, FW_LOG_DROP_ALL);

    string FW_LOG_DROP_CRIT = settings["FW_LOG_DROP_CRIT"]:"yes";
    write_ret = SCR::Write(.sysconfig.SuSEfirewall2.FW_LOG_DROP_CRIT, FW_LOG_DROP_CRIT);

    string FW_PROTECT_FROM_INTERNAL = settings["FW_PROTECT_FROM_INTERNAL"]:"yes";
    write_ret = SCR::Write(.sysconfig.SuSEfirewall2.FW_PROTECT_FROM_INTERNAL, FW_PROTECT_FROM_INTERNAL);

    string FW_DEV_INT = settings["FW_DEV_INT"]:"";
    write_ret = SCR::Write(.sysconfig.SuSEfirewall2.FW_DEV_INT, FW_DEV_INT);

    string FW_DEV_EXT = settings["FW_DEV_EXT"]:"";
    write_ret = SCR::Write(.sysconfig.SuSEfirewall2.FW_DEV_EXT, FW_DEV_EXT);

    string FW_SERVICES_EXT_TCP = settings["FW_SERVICES_EXT_TCP"]:"";
    write_ret = SCR::Write(.sysconfig.SuSEfirewall2.FW_SERVICES_EXT_TCP, FW_SERVICES_EXT_TCP);

    string FW_AUTOPROTECT_SERVICES = settings["FW_AUTOPROTECT_SERVICES"]:"yes";
    write_ret = SCR::Write(.sysconfig.SuSEfirewall2.FW_AUTOPROTECT_SERVICES, FW_AUTOPROTECT_SERVICES);

    string FW_MASQ_NETS = settings["FW_MASQ_NETS"]:"";
    write_ret = SCR::Write(.sysconfig.SuSEfirewall2.FW_MASQ_NETS, FW_MASQ_NETS);

    string FW_ROUTE = settings["FW_ROUTE"]:"no";
    write_ret = SCR::Write(.sysconfig.SuSEfirewall2.FW_ROUTE, FW_ROUTE);

    string FW_MASQUERADE = settings["FW_MASQUERADE"]:"no";
    write_ret = SCR::Write(.sysconfig.SuSEfirewall2.FW_MASQUERADE, FW_MASQUERADE);

    string FW_ALLOW_FW_TRACEROUTE = settings["FW_ALLOW_FW_TRACEROUTE"]:"yes";
    write_ret = SCR::Write(.sysconfig.SuSEfirewall2.FW_ALLOW_FW_TRACEROUTE, FW_ALLOW_FW_TRACEROUTE);

//  </AUTOCODE>

    if(personal_firewall_is_active) {
	write_ret = SCR::Write(.sysconfig.personal-firewall.REJECT_ALL_INCOMING_CONNECTIONS,"no");
	write_ret = SCR::Write(.sysconfig.personal-firewall,nil);
    }

    // sync settings to file !!!
    write_ret = SCR::Write(.sysconfig.SuSEfirewall2, nil);
    if (!write_ret)
	/* Popup text */
	Report::Error(_("Writing settings failed"));

    Progress::NextStage();

    y2milestone("Writing firewall settings finished, return code %1", write_ret);

    // Why is this needed?
    if (personal_firewall_is_active)
	SCR::Execute (.target.bash,"/sbin/SuSEpersonal-firewall",$[]);

    list services = [
	"SuSEfirewall2_init",
	"SuSEfirewall2_setup",
	"SuSEfirewall2_final",
    ];

    foreach(string service, services, ``{

	y2milestone("Enabling service %1", service);
	if(!Runlevel::ServiceAdjust(service , "enable"))
	    /* Popup text */
	    Report::Error(_("Starting of the firewall failed"));

    });

    Progress::NextStage();

    if(!write_only)
	Runlevel::RunInitScript("SuSEfirewall2_final", "start");

    Progress::Finish();

    return true;
}

/**
 */
global define boolean AddService(string service) ``{

    list servs = splitstring(settings["FW_SERVICES_EXT_TCP"]:"", " ");
    if(servs == nil) servs = [];

    servs = add(servs, service);
    string sers = mergestring(servs, " ");
    if(servs == nil) return false;
    settings["FW_SERVICES_EXT_TCP"] = sers;

    return true;
}

/* EOF */
}
